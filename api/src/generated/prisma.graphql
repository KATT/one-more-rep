# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Exercise implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name(where: LocalizedStringWhereInput): LocalizedString!
  slug: String!
}

type ExerciseSet implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  exercise(where: ExerciseWhereInput): Exercise!
  reps: Int!
  repsUnit: RepUnit!
  intensity: Float
  intensityUnit: IntensityUnit
}

type LocalizedString implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  variations(where: LocalizedStringVariationWhereInput, orderBy: LocalizedStringVariationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LocalizedStringVariation!]
}

type LocalizedStringVariation implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  locale: Locale!
  string: String!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
  categoryName: String!
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type WorkoutProgram implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  settings(where: WorkoutProgramSettingsWhereInput): WorkoutProgramSettings!
  workouts(where: WorkoutSessionWhereInput, orderBy: WorkoutSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkoutSession!]
  rules(where: WorkoutRuleWhereInput, orderBy: WorkoutRuleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkoutRule!]
}

type WorkoutSession implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  sets(where: ExerciseSetWhereInput, orderBy: ExerciseSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExerciseSet!]
}


#
# Other Types
#

type AggregateExercise {
  count: Int!
}

type AggregateExerciseSet {
  count: Int!
}

type AggregateLocalizedString {
  count: Int!
}

type AggregateLocalizedStringVariation {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorkoutProgram {
  count: Int!
}

type AggregateWorkoutProgramSettings {
  count: Int!
}

type AggregateWorkoutRule {
  count: Int!
}

type AggregateWorkoutSession {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type ExerciseConnection {
  pageInfo: PageInfo!
  edges: [ExerciseEdge]!
  aggregate: AggregateExercise!
}

input ExerciseCreateInput {
  slug: String!
  name: LocalizedStringCreateOneInput!
}

input ExerciseCreateOneInput {
  create: ExerciseCreateInput
  connect: ExerciseWhereUniqueInput
}

type ExerciseEdge {
  node: Exercise!
  cursor: String!
}

enum ExerciseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  slug_ASC
  slug_DESC
}

type ExercisePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
}

type ExerciseSetConnection {
  pageInfo: PageInfo!
  edges: [ExerciseSetEdge]!
  aggregate: AggregateExerciseSet!
}

input ExerciseSetCreateInput {
  reps: Int!
  repsUnit: RepUnit!
  intensity: Float
  intensityUnit: IntensityUnit
  exercise: ExerciseCreateOneInput!
}

input ExerciseSetCreateManyInput {
  create: [ExerciseSetCreateInput!]
  connect: [ExerciseSetWhereUniqueInput!]
}

type ExerciseSetEdge {
  node: ExerciseSet!
  cursor: String!
}

enum ExerciseSetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  reps_ASC
  reps_DESC
  repsUnit_ASC
  repsUnit_DESC
  intensity_ASC
  intensity_DESC
  intensityUnit_ASC
  intensityUnit_DESC
}

type ExerciseSetPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  reps: Int!
  repsUnit: RepUnit!
  intensity: Float
  intensityUnit: IntensityUnit
}

type ExerciseSetSubscriptionPayload {
  mutation: MutationType!
  node: ExerciseSet
  updatedFields: [String!]
  previousValues: ExerciseSetPreviousValues
}

input ExerciseSetSubscriptionWhereInput {
  AND: [ExerciseSetSubscriptionWhereInput!]
  OR: [ExerciseSetSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExerciseSetWhereInput
}

input ExerciseSetUpdateInput {
  reps: Int
  repsUnit: RepUnit
  intensity: Float
  intensityUnit: IntensityUnit
  exercise: ExerciseUpdateOneInput
}

input ExerciseSetUpdateManyInput {
  create: [ExerciseSetCreateInput!]
  connect: [ExerciseSetWhereUniqueInput!]
  disconnect: [ExerciseSetWhereUniqueInput!]
  delete: [ExerciseSetWhereUniqueInput!]
}

input ExerciseSetWhereInput {
  AND: [ExerciseSetWhereInput!]
  OR: [ExerciseSetWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  reps: Int
  reps_not: Int
  reps_in: [Int!]
  reps_not_in: [Int!]
  reps_lt: Int
  reps_lte: Int
  reps_gt: Int
  reps_gte: Int
  repsUnit: RepUnit
  repsUnit_not: RepUnit
  repsUnit_in: [RepUnit!]
  repsUnit_not_in: [RepUnit!]
  intensity: Float
  intensity_not: Float
  intensity_in: [Float!]
  intensity_not_in: [Float!]
  intensity_lt: Float
  intensity_lte: Float
  intensity_gt: Float
  intensity_gte: Float
  intensityUnit: IntensityUnit
  intensityUnit_not: IntensityUnit
  intensityUnit_in: [IntensityUnit!]
  intensityUnit_not_in: [IntensityUnit!]
  exercise: ExerciseWhereInput
}

input ExerciseSetWhereUniqueInput {
  id: ID
}

type ExerciseSubscriptionPayload {
  mutation: MutationType!
  node: Exercise
  updatedFields: [String!]
  previousValues: ExercisePreviousValues
}

input ExerciseSubscriptionWhereInput {
  AND: [ExerciseSubscriptionWhereInput!]
  OR: [ExerciseSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExerciseWhereInput
}

input ExerciseUpdateInput {
  slug: String
  name: LocalizedStringUpdateOneInput
}

input ExerciseUpdateOneInput {
  create: ExerciseCreateInput
  connect: ExerciseWhereUniqueInput
  disconnect: ExerciseWhereUniqueInput
  delete: ExerciseWhereUniqueInput
}

input ExerciseWhereInput {
  AND: [ExerciseWhereInput!]
  OR: [ExerciseWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  name: LocalizedStringWhereInput
}

input ExerciseWhereUniqueInput {
  id: ID
  slug: String
}

enum IntensityUnit {
  KilometrePerHour
  MilePerHour
  Pound
  Kilogram
}

enum Locale {
  En_GB
  Sv_SE
}

type LocalizedStringConnection {
  pageInfo: PageInfo!
  edges: [LocalizedStringEdge]!
  aggregate: AggregateLocalizedString!
}

input LocalizedStringCreateInput {
  variations: LocalizedStringVariationCreateManyInput
}

input LocalizedStringCreateOneInput {
  create: LocalizedStringCreateInput
  connect: LocalizedStringWhereUniqueInput
}

type LocalizedStringEdge {
  node: LocalizedString!
  cursor: String!
}

enum LocalizedStringOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LocalizedStringPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LocalizedStringSubscriptionPayload {
  mutation: MutationType!
  node: LocalizedString
  updatedFields: [String!]
  previousValues: LocalizedStringPreviousValues
}

input LocalizedStringSubscriptionWhereInput {
  AND: [LocalizedStringSubscriptionWhereInput!]
  OR: [LocalizedStringSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocalizedStringWhereInput
}

input LocalizedStringUpdateInput {
  variations: LocalizedStringVariationUpdateManyInput
}

input LocalizedStringUpdateOneInput {
  create: LocalizedStringCreateInput
  connect: LocalizedStringWhereUniqueInput
  disconnect: LocalizedStringWhereUniqueInput
  delete: LocalizedStringWhereUniqueInput
}

type LocalizedStringVariationConnection {
  pageInfo: PageInfo!
  edges: [LocalizedStringVariationEdge]!
  aggregate: AggregateLocalizedStringVariation!
}

input LocalizedStringVariationCreateInput {
  locale: Locale!
  string: String!
}

input LocalizedStringVariationCreateManyInput {
  create: [LocalizedStringVariationCreateInput!]
  connect: [LocalizedStringVariationWhereUniqueInput!]
}

type LocalizedStringVariationEdge {
  node: LocalizedStringVariation!
  cursor: String!
}

enum LocalizedStringVariationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  locale_ASC
  locale_DESC
  string_ASC
  string_DESC
}

type LocalizedStringVariationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  locale: Locale!
  string: String!
}

type LocalizedStringVariationSubscriptionPayload {
  mutation: MutationType!
  node: LocalizedStringVariation
  updatedFields: [String!]
  previousValues: LocalizedStringVariationPreviousValues
}

input LocalizedStringVariationSubscriptionWhereInput {
  AND: [LocalizedStringVariationSubscriptionWhereInput!]
  OR: [LocalizedStringVariationSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocalizedStringVariationWhereInput
}

input LocalizedStringVariationUpdateInput {
  locale: Locale
  string: String
}

input LocalizedStringVariationUpdateManyInput {
  create: [LocalizedStringVariationCreateInput!]
  connect: [LocalizedStringVariationWhereUniqueInput!]
  disconnect: [LocalizedStringVariationWhereUniqueInput!]
  delete: [LocalizedStringVariationWhereUniqueInput!]
}

input LocalizedStringVariationWhereInput {
  AND: [LocalizedStringVariationWhereInput!]
  OR: [LocalizedStringVariationWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  locale: Locale
  locale_not: Locale
  locale_in: [Locale!]
  locale_not_in: [Locale!]
  string: String
  string_not: String
  string_in: [String!]
  string_not_in: [String!]
  string_lt: String
  string_lte: String
  string_gt: String
  string_gte: String
  string_contains: String
  string_not_contains: String
  string_starts_with: String
  string_not_starts_with: String
  string_ends_with: String
  string_not_ends_with: String
}

input LocalizedStringVariationWhereUniqueInput {
  id: ID
}

input LocalizedStringWhereInput {
  AND: [LocalizedStringWhereInput!]
  OR: [LocalizedStringWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  variations_every: LocalizedStringVariationWhereInput
  variations_some: LocalizedStringVariationWhereInput
  variations_none: LocalizedStringVariationWhereInput
}

input LocalizedStringWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createLocalizedStringVariation(data: LocalizedStringVariationCreateInput!): LocalizedStringVariation!
  createLocalizedString(data: LocalizedStringCreateInput!): LocalizedString!
  createExercise(data: ExerciseCreateInput!): Exercise!
  createExerciseSet(data: ExerciseSetCreateInput!): ExerciseSet!
  createWorkoutSession(data: WorkoutSessionCreateInput!): WorkoutSession!
  createWorkoutProgramSettings(data: WorkoutProgramSettingsCreateInput!): WorkoutProgramSettings!
  createWorkoutRule(data: WorkoutRuleCreateInput!): WorkoutRule!
  createWorkoutProgram(data: WorkoutProgramCreateInput!): WorkoutProgram!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateLocalizedStringVariation(data: LocalizedStringVariationUpdateInput!, where: LocalizedStringVariationWhereUniqueInput!): LocalizedStringVariation
  updateLocalizedString(data: LocalizedStringUpdateInput!, where: LocalizedStringWhereUniqueInput!): LocalizedString
  updateExercise(data: ExerciseUpdateInput!, where: ExerciseWhereUniqueInput!): Exercise
  updateExerciseSet(data: ExerciseSetUpdateInput!, where: ExerciseSetWhereUniqueInput!): ExerciseSet
  updateWorkoutSession(data: WorkoutSessionUpdateInput!, where: WorkoutSessionWhereUniqueInput!): WorkoutSession
  updateWorkoutProgram(data: WorkoutProgramUpdateInput!, where: WorkoutProgramWhereUniqueInput!): WorkoutProgram
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteLocalizedStringVariation(where: LocalizedStringVariationWhereUniqueInput!): LocalizedStringVariation
  deleteLocalizedString(where: LocalizedStringWhereUniqueInput!): LocalizedString
  deleteExercise(where: ExerciseWhereUniqueInput!): Exercise
  deleteExerciseSet(where: ExerciseSetWhereUniqueInput!): ExerciseSet
  deleteWorkoutSession(where: WorkoutSessionWhereUniqueInput!): WorkoutSession
  deleteWorkoutProgram(where: WorkoutProgramWhereUniqueInput!): WorkoutProgram
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertLocalizedStringVariation(where: LocalizedStringVariationWhereUniqueInput!, create: LocalizedStringVariationCreateInput!, update: LocalizedStringVariationUpdateInput!): LocalizedStringVariation!
  upsertLocalizedString(where: LocalizedStringWhereUniqueInput!, create: LocalizedStringCreateInput!, update: LocalizedStringUpdateInput!): LocalizedString!
  upsertExercise(where: ExerciseWhereUniqueInput!, create: ExerciseCreateInput!, update: ExerciseUpdateInput!): Exercise!
  upsertExerciseSet(where: ExerciseSetWhereUniqueInput!, create: ExerciseSetCreateInput!, update: ExerciseSetUpdateInput!): ExerciseSet!
  upsertWorkoutSession(where: WorkoutSessionWhereUniqueInput!, create: WorkoutSessionCreateInput!, update: WorkoutSessionUpdateInput!): WorkoutSession!
  upsertWorkoutProgram(where: WorkoutProgramWhereUniqueInput!, create: WorkoutProgramCreateInput!, update: WorkoutProgramUpdateInput!): WorkoutProgram!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyLocalizedStringVariations(data: LocalizedStringVariationUpdateInput!, where: LocalizedStringVariationWhereInput!): BatchPayload!
  updateManyLocalizedStrings(data: LocalizedStringUpdateInput!, where: LocalizedStringWhereInput!): BatchPayload!
  updateManyExercises(data: ExerciseUpdateInput!, where: ExerciseWhereInput!): BatchPayload!
  updateManyExerciseSets(data: ExerciseSetUpdateInput!, where: ExerciseSetWhereInput!): BatchPayload!
  updateManyWorkoutSessions(data: WorkoutSessionUpdateInput!, where: WorkoutSessionWhereInput!): BatchPayload!
  updateManyWorkoutProgramSettingses(data: WorkoutProgramSettingsUpdateInput!, where: WorkoutProgramSettingsWhereInput!): BatchPayload!
  updateManyWorkoutRules(data: WorkoutRuleUpdateInput!, where: WorkoutRuleWhereInput!): BatchPayload!
  updateManyWorkoutPrograms(data: WorkoutProgramUpdateInput!, where: WorkoutProgramWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyLocalizedStringVariations(where: LocalizedStringVariationWhereInput!): BatchPayload!
  deleteManyLocalizedStrings(where: LocalizedStringWhereInput!): BatchPayload!
  deleteManyExercises(where: ExerciseWhereInput!): BatchPayload!
  deleteManyExerciseSets(where: ExerciseSetWhereInput!): BatchPayload!
  deleteManyWorkoutSessions(where: WorkoutSessionWhereInput!): BatchPayload!
  deleteManyWorkoutProgramSettingses(where: WorkoutProgramSettingsWhereInput!): BatchPayload!
  deleteManyWorkoutRules(where: WorkoutRuleWhereInput!): BatchPayload!
  deleteManyWorkoutPrograms(where: WorkoutProgramWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  categoryName: String!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  text: String!
  categoryName: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  categoryName_ASC
  categoryName_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  categoryName: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  categoryName: String
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutAuthorInput!]
  upsert: [PostUpsertWithoutAuthorInput!]
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
  categoryName: String
}

input PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  categoryName: String
  categoryName_not: String
  categoryName_in: [String!]
  categoryName_not_in: [String!]
  categoryName_lt: String
  categoryName_lte: String
  categoryName_gt: String
  categoryName_gte: String
  categoryName_contains: String
  categoryName_not_contains: String
  categoryName_starts_with: String
  categoryName_not_starts_with: String
  categoryName_ends_with: String
  categoryName_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  localizedStringVariations(where: LocalizedStringVariationWhereInput, orderBy: LocalizedStringVariationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LocalizedStringVariation]!
  localizedStrings(where: LocalizedStringWhereInput, orderBy: LocalizedStringOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LocalizedString]!
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise]!
  exerciseSets(where: ExerciseSetWhereInput, orderBy: ExerciseSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExerciseSet]!
  workoutSessions(where: WorkoutSessionWhereInput, orderBy: WorkoutSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkoutSession]!
  workoutProgramSettingses(where: WorkoutProgramSettingsWhereInput, orderBy: WorkoutProgramSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkoutProgramSettings]!
  workoutRules(where: WorkoutRuleWhereInput, orderBy: WorkoutRuleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkoutRule]!
  workoutPrograms(where: WorkoutProgramWhereInput, orderBy: WorkoutProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkoutProgram]!
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  localizedStringVariation(where: LocalizedStringVariationWhereUniqueInput!): LocalizedStringVariation
  localizedString(where: LocalizedStringWhereUniqueInput!): LocalizedString
  exercise(where: ExerciseWhereUniqueInput!): Exercise
  exerciseSet(where: ExerciseSetWhereUniqueInput!): ExerciseSet
  workoutSession(where: WorkoutSessionWhereUniqueInput!): WorkoutSession
  workoutProgram(where: WorkoutProgramWhereUniqueInput!): WorkoutProgram
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  localizedStringVariationsConnection(where: LocalizedStringVariationWhereInput, orderBy: LocalizedStringVariationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocalizedStringVariationConnection!
  localizedStringsConnection(where: LocalizedStringWhereInput, orderBy: LocalizedStringOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocalizedStringConnection!
  exercisesConnection(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExerciseConnection!
  exerciseSetsConnection(where: ExerciseSetWhereInput, orderBy: ExerciseSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExerciseSetConnection!
  workoutSessionsConnection(where: WorkoutSessionWhereInput, orderBy: WorkoutSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkoutSessionConnection!
  workoutProgramSettingsesConnection(where: WorkoutProgramSettingsWhereInput, orderBy: WorkoutProgramSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkoutProgramSettingsConnection!
  workoutRulesConnection(where: WorkoutRuleWhereInput, orderBy: WorkoutRuleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkoutRuleConnection!
  workoutProgramsConnection(where: WorkoutProgramWhereInput, orderBy: WorkoutProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkoutProgramConnection!
  node(id: ID!): Node
}

enum RepUnit {
  Kilometre
  Mile
  Minute
  Second
  Repetition
  UntilFailure
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  localizedStringVariation(where: LocalizedStringVariationSubscriptionWhereInput): LocalizedStringVariationSubscriptionPayload
  localizedString(where: LocalizedStringSubscriptionWhereInput): LocalizedStringSubscriptionPayload
  exercise(where: ExerciseSubscriptionWhereInput): ExerciseSubscriptionPayload
  exerciseSet(where: ExerciseSetSubscriptionWhereInput): ExerciseSetSubscriptionPayload
  workoutSession(where: WorkoutSessionSubscriptionWhereInput): WorkoutSessionSubscriptionPayload
  workoutProgramSettings(where: WorkoutProgramSettingsSubscriptionWhereInput): WorkoutProgramSettingsSubscriptionPayload
  workoutRule(where: WorkoutRuleSubscriptionWhereInput): WorkoutRuleSubscriptionPayload
  workoutProgram(where: WorkoutProgramSubscriptionWhereInput): WorkoutProgramSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  name: String
}

input UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum WeightUnit {
  Pound
  Kilogram
}

type WorkoutProgramConnection {
  pageInfo: PageInfo!
  edges: [WorkoutProgramEdge]!
  aggregate: AggregateWorkoutProgram!
}

input WorkoutProgramCreateInput {
  name: String!
  settings: WorkoutProgramSettingsCreateOneInput!
  workouts: WorkoutSessionCreateManyInput
  rules: WorkoutRuleCreateManyInput
}

type WorkoutProgramEdge {
  node: WorkoutProgram!
  cursor: String!
}

enum WorkoutProgramOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type WorkoutProgramPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type WorkoutProgramSettings {
  weightUnit: WeightUnit!
}

type WorkoutProgramSettingsConnection {
  pageInfo: PageInfo!
  edges: [WorkoutProgramSettingsEdge]!
  aggregate: AggregateWorkoutProgramSettings!
}

input WorkoutProgramSettingsCreateInput {
  weightUnit: WeightUnit!
}

input WorkoutProgramSettingsCreateOneInput {
  create: WorkoutProgramSettingsCreateInput
}

type WorkoutProgramSettingsEdge {
  node: WorkoutProgramSettings!
  cursor: String!
}

enum WorkoutProgramSettingsOrderByInput {
  weightUnit_ASC
  weightUnit_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkoutProgramSettingsPreviousValues {
  weightUnit: WeightUnit!
}

type WorkoutProgramSettingsSubscriptionPayload {
  mutation: MutationType!
  node: WorkoutProgramSettings
  updatedFields: [String!]
  previousValues: WorkoutProgramSettingsPreviousValues
}

input WorkoutProgramSettingsSubscriptionWhereInput {
  AND: [WorkoutProgramSettingsSubscriptionWhereInput!]
  OR: [WorkoutProgramSettingsSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkoutProgramSettingsWhereInput
}

input WorkoutProgramSettingsUpdateInput {
  weightUnit: WeightUnit
}

input WorkoutProgramSettingsUpdateOneInput {
  create: WorkoutProgramSettingsCreateInput
}

input WorkoutProgramSettingsWhereInput {
  AND: [WorkoutProgramSettingsWhereInput!]
  OR: [WorkoutProgramSettingsWhereInput!]
  weightUnit: WeightUnit
  weightUnit_not: WeightUnit
  weightUnit_in: [WeightUnit!]
  weightUnit_not_in: [WeightUnit!]
}

type WorkoutProgramSubscriptionPayload {
  mutation: MutationType!
  node: WorkoutProgram
  updatedFields: [String!]
  previousValues: WorkoutProgramPreviousValues
}

input WorkoutProgramSubscriptionWhereInput {
  AND: [WorkoutProgramSubscriptionWhereInput!]
  OR: [WorkoutProgramSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkoutProgramWhereInput
}

input WorkoutProgramUpdateInput {
  name: String
  settings: WorkoutProgramSettingsUpdateOneInput
  workouts: WorkoutSessionUpdateManyInput
  rules: WorkoutRuleUpdateManyInput
}

input WorkoutProgramWhereInput {
  AND: [WorkoutProgramWhereInput!]
  OR: [WorkoutProgramWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  settings: WorkoutProgramSettingsWhereInput
  workouts_every: WorkoutSessionWhereInput
  workouts_some: WorkoutSessionWhereInput
  workouts_none: WorkoutSessionWhereInput
  rules_every: WorkoutRuleWhereInput
  rules_some: WorkoutRuleWhereInput
  rules_none: WorkoutRuleWhereInput
}

input WorkoutProgramWhereUniqueInput {
  id: ID
}

type WorkoutRule {
  hook: WorkoutRuleHook
  num: Int!
  exercise(where: ExerciseWhereInput): Exercise!
}

type WorkoutRuleConnection {
  pageInfo: PageInfo!
  edges: [WorkoutRuleEdge]!
  aggregate: AggregateWorkoutRule!
}

input WorkoutRuleCreateInput {
  hook: WorkoutRuleHook
  num: Int
  exercise: ExerciseCreateOneInput!
}

input WorkoutRuleCreateManyInput {
  create: [WorkoutRuleCreateInput!]
}

type WorkoutRuleEdge {
  node: WorkoutRule!
  cursor: String!
}

enum WorkoutRuleHook {
  AfterSuccessfulSet
}

enum WorkoutRuleOrderByInput {
  hook_ASC
  hook_DESC
  num_ASC
  num_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkoutRulePreviousValues {
  hook: WorkoutRuleHook
  num: Int!
}

type WorkoutRuleSubscriptionPayload {
  mutation: MutationType!
  node: WorkoutRule
  updatedFields: [String!]
  previousValues: WorkoutRulePreviousValues
}

input WorkoutRuleSubscriptionWhereInput {
  AND: [WorkoutRuleSubscriptionWhereInput!]
  OR: [WorkoutRuleSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkoutRuleWhereInput
}

input WorkoutRuleUpdateInput {
  hook: WorkoutRuleHook
  num: Int
  exercise: ExerciseUpdateOneInput
}

input WorkoutRuleUpdateManyInput {
  create: [WorkoutRuleCreateInput!]
}

input WorkoutRuleWhereInput {
  AND: [WorkoutRuleWhereInput!]
  OR: [WorkoutRuleWhereInput!]
  hook: WorkoutRuleHook
  hook_not: WorkoutRuleHook
  hook_in: [WorkoutRuleHook!]
  hook_not_in: [WorkoutRuleHook!]
  num: Int
  num_not: Int
  num_in: [Int!]
  num_not_in: [Int!]
  num_lt: Int
  num_lte: Int
  num_gt: Int
  num_gte: Int
  exercise: ExerciseWhereInput
}

type WorkoutSessionConnection {
  pageInfo: PageInfo!
  edges: [WorkoutSessionEdge]!
  aggregate: AggregateWorkoutSession!
}

input WorkoutSessionCreateInput {
  name: String!
  sets: ExerciseSetCreateManyInput
}

input WorkoutSessionCreateManyInput {
  create: [WorkoutSessionCreateInput!]
  connect: [WorkoutSessionWhereUniqueInput!]
}

type WorkoutSessionEdge {
  node: WorkoutSession!
  cursor: String!
}

enum WorkoutSessionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type WorkoutSessionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type WorkoutSessionSubscriptionPayload {
  mutation: MutationType!
  node: WorkoutSession
  updatedFields: [String!]
  previousValues: WorkoutSessionPreviousValues
}

input WorkoutSessionSubscriptionWhereInput {
  AND: [WorkoutSessionSubscriptionWhereInput!]
  OR: [WorkoutSessionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkoutSessionWhereInput
}

input WorkoutSessionUpdateInput {
  name: String
  sets: ExerciseSetUpdateManyInput
}

input WorkoutSessionUpdateManyInput {
  create: [WorkoutSessionCreateInput!]
  connect: [WorkoutSessionWhereUniqueInput!]
  disconnect: [WorkoutSessionWhereUniqueInput!]
  delete: [WorkoutSessionWhereUniqueInput!]
}

input WorkoutSessionWhereInput {
  AND: [WorkoutSessionWhereInput!]
  OR: [WorkoutSessionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  sets_every: ExerciseSetWhereInput
  sets_some: ExerciseSetWhereInput
  sets_none: ExerciseSetWhereInput
}

input WorkoutSessionWhereUniqueInput {
  id: ID
}
